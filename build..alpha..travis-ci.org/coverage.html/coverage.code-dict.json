{"/home/travis/build/npmtest/node-npmtest-google-sheets/test.js":"/* istanbul instrument in package npmtest_google_sheets */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-google-sheets/lib.npmtest_google_sheets.js":"/* istanbul instrument in package npmtest_google_sheets */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_google_sheets = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_google_sheets = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-google-sheets/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-google-sheets && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_google_sheets */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_google_sheets\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_google_sheets.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_google_sheets.rollup.js'] =\n            local.assetsDict['/assets.npmtest_google_sheets.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_google_sheets.__dirname + '/lib.npmtest_google_sheets.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-google-sheets/node_modules/google-sheets/index.js":"// This file is just added for convenience so this repository can be\r\n// directly checked out into a project's deps folder\r\nmodule.exports = require('./lib/index');","/home/travis/build/npmtest/node-npmtest-google-sheets/node_modules/google-sheets/lib/index.js":"var Rows = require('./rows').Rows,\r\n\tCells = require('./cells').Cells,\r\n\tWorksheet = require('./worksheet').Worksheet,\r\n\tSpreadsheet = require('./spreadsheet').Spreadsheet,\r\n\tauthorize = require('./auth').authorize,\r\n\tmakeUrl = require('./utils').makeUrl,\r\n\trequest = require('request'),\r\n\txml2js = require('xml2js'),\r\n\turl = require('url');\r\n\r\nmodule.exports = {\r\n\tauthId: null,\r\n\r\n\tWorksheet: Worksheet,\r\n\tSpreadsheet: Spreadsheet,\r\n\tRows: Rows,\r\n\tCells: Cells,\r\n\r\n\tauth: function(params, callback) {\r\n\t\tauthorize(params, function(err, value) {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn callback(err,value);\r\n\t\t\t}\r\n\t\t\tthis.authId = value;\r\n\t\t\tcallback(null, this.authId);\r\n\t\t}.bind(this));\r\n\t},\r\n\tlogout: function() {\r\n\t\tthis.authId = null;\r\n\t},\r\n\tparseSheet: function(entry) {\r\n\t\tvar sheet = {\r\n\t\t\tlastModified: entry.updated,\r\n\t\t\turl: entry.id,\r\n\t\t\tauthor: {\r\n\t\t\t\tname: entry.author.name,\r\n\t\t\t\temail: entry.author.email\r\n\t\t\t},\r\n\t\t\ttitle: entry.title._\r\n\t\t};\r\n\t\tif (entry.link && entry.link[1] && entry.link[1].href && entry.link[1].rel=='alternate') {\r\n\t\t\tvar keyUrl = entry.link[1].href,\r\n\t\t\t\tparsedUrl = url.parse(keyUrl,true);\r\n\r\n\t\t\tsheet.key = parsedUrl.query.key;\r\n\t\t}\r\n\t\tsheet.id = entry.id.substring(entry.id.lastIndexOf('/')+1);\r\n\t\treturn new Spreadsheet(sheet, this.authId);\r\n\t},\r\n\r\n\tlist: function(callback) {\r\n\t\tvar listUrl = 'https://spreadsheets.google.com/feeds/spreadsheets/private/full', that = this;\r\n\r\n\t\t// do request for list of spreadsheets\r\n\t\tif (!this.authId) {\r\n\t\t\treturn callback('auth required');\r\n\t\t}\r\n\r\n\t\tthis.query({\r\n\t\t\turl: listUrl\r\n\t\t}, function(err, result) {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\tvar sheets = [];\r\n\t\t\tfor(var i=0; i < result.feed.entry.length; i++) {\r\n\t\t\t\tvar entry = result.feed.entry[i],\r\n\t\t\t\t\tsheet = that.parseSheet(entry);\r\n\t\t\t\tsheets.push(sheet);\r\n\t\t\t}\r\n\t\t\tcallback(null,sheets);\r\n\t\t});\r\n\t},\r\n\r\n\tquery: function(options, callback) {\r\n\t\trequest({\r\n\t\t\turl: options.url,\r\n\t\t\tmethod: options.method || 'GET',\r\n\t\t\tbody: options.body || null,\r\n\t\t\theaders: {\r\n\t\t\t\t'Authorization': 'GoogleLogin auth=' + this.authId\r\n\t\t\t}\r\n\t\t}, function(error, response, body) {\r\n\t\t\tif (error) {\r\n\t\t\t\treturn callback(error);\r\n\t\t\t}\r\n\t\t\tvar parser = new xml2js.Parser({\r\n\t\t\t\texplicitArray: false,\r\n\t\t\t\tasync: true,\r\n\t\t\t\tmergeAttrs: true\r\n\t\t\t});\r\n\t\t\tparser.parseString(body, function(err, result) {\r\n\t\t\t\tcallback(err, result);\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n\r\n\tgetSpreadsheet: function(key, callback) {\r\n\t\t// creates a spreadsheet object, having first confirmed the sheet exists\r\n\t\t//try and get the url\r\n\t\tif (!this.authId) {\r\n\t\t\treturn callback('auth required');\r\n\t\t}\r\n\t\tvar sheetUrl = makeUrl('spreadsheets',key), that = this;\r\n\t\tthis.query({\r\n\t\t\turl: sheetUrl\r\n\t\t},function(err, result) {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\tif (!result) {\r\n\t\t\t\treturn callback(null,null);\r\n\t\t\t}\r\n\t\t\t// assume it worked, parse the spreadsheet\r\n\t\t\tcallback(null, that.parseSheet(result.entry));\r\n\t\t});\r\n\t}\r\n};","/home/travis/build/npmtest/node-npmtest-google-sheets/node_modules/google-sheets/lib/rows.js":"var request = require('request'),\r\n\tbuilder = require('xmlbuilder'),\r\n\txml2js = require('xml2js'),\r\n\tmakeUrl = require('./utils').makeUrl,\r\n\t_ = require('underscore');\r\n\r\nfunction Rows(data,authId) {\r\n\tthis.authId = authId;\r\n\tthis.rows = [];\r\n\tthis.parse(data);\r\n}\r\nRows.prototype = {\r\n\tquery: function(options, callback) {\r\n\t\trequest({\r\n\t\t\turl: options.url,\r\n\t\t\tmethod: options.method || 'GET',\r\n\t\t\tbody: options.body || null,\r\n\t\t\theaders: _.extend(options.headers || {} , {\r\n\t\t\t\t'Authorization': 'GoogleLogin auth=' + this.authId,\r\n\t\t\t\t'Content-Type': 'application/atom+xml'\r\n\t\t\t})\r\n\t\t}, function(error, response, body) {\r\n\t\t\tif (error) {\r\n\t\t\t\treturn callback(error);\r\n\t\t\t}\r\n\t\t\tvar parser = new xml2js.Parser({\r\n\t\t\t\texplicitArray: false,\r\n\t\t\t\tasync: true,\r\n\t\t\t\tmergeAttrs: true\r\n\t\t\t});\r\n\t\t\tif (body) {\r\n\t\t\t\tparser.parseString(body, function(err, result) {\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\treturn callback(body);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcallback(err, result);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tcallback();\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\tparseEntry: function(entry) {\r\n\t\tif (!entry.id) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tvar row = {\r\n\t\t\tid: entry.id,\r\n\t\t\tlastModified: entry.updated,\r\n\t\t\ttitle: entry.title._,\r\n\t\t\tcontent: entry.content._,\r\n\t\t\tdata: {}\r\n\t\t};\r\n\t\tfor (var k=0; k < entry.link.length; k++) {\r\n\t\t\tif (entry.link[k].rel == 'edit') {\r\n\t\t\t\trow.editUrl = entry.link[k].href;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (var key in entry) {\r\n\t\t\tif (key.indexOf('gsx:')===0) {\r\n\t\t\t\tvar rowName = key.substr('gsx:'.length);\r\n\t\t\t\tif (!_.isEmpty(entry[key])) {\r\n\t\t\t\t\trow.data[rowName] = entry[key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn row;\r\n\t},\r\n\tparse: function(data) {\r\n\t\tvar i = 0;\r\n\r\n\t\tthis.id = data.feed.id;\r\n\r\n\t\t// loop over links\r\n\t\tfor (i=0; i < data.feed.link.length; i++) {\r\n\t\t\tif (data.feed.link[i].rel == 'http://schemas.google.com/g/2005#post') {\r\n\t\t\t\tthis.postUrl = data.feed.link[i].href;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.totalResults = parseInt(data.feed['openSearch:totalResults'],10);\r\n\t\tthis.startIndex = parseInt(data.feed['openSearch:startIndex'],10);\r\n\t\tif (data.feed['openSearch:itemsPerPage']) {\r\n\t\t\tthis.itemsPerPage = parseInt(data.feed['openSearch:itemsPerPage'],10);\r\n\t\t}\r\n\r\n\t\t// loop over items and create Row objects\r\n\t\tvar entries = data.feed.entry;\r\n\t\tvar rows = [], row;\r\n\t\tif (Array.isArray(entries)) {\r\n\t\t\tfor (i=0; i < entries.length; i++) {\r\n\t\t\t\tvar entry = entries[i];\r\n\t\t\t\trow = this.parseEntry(entry);\r\n\t\t\t\trows.push(row);\r\n\t\t\t}\r\n\t\t} else if (entries) {\r\n\t\t\trow = this.parseEntry(entries);\r\n\t\t\trows.push(row);\r\n\t\t}\r\n\t\tthis.rows = rows;\r\n\t},\r\n\tcreate: function(row, callback) {\r\n\t\t// modify a row, then pass it to this function to save it, only modifications to data info is allowed\r\n\t\tvar doc = builder.create(),\r\n\t\t\tthat = this;\r\n\r\n\t\tvar document = doc.begin('entry')\r\n\t\t\t\t.att('xmlns','http://www.w3.org/2005/Atom')\r\n\t\t\t\t.att('xmlns:gsx','http://schemas.google.com/spreadsheets/2006/extended');\r\n\r\n\t\tfor (var key in row) {\r\n\t\t\tvar keyname = key.toLowerCase().replace('[^a-z0-9]','');\r\n\t\t\tdocument.ele('gsx:' + keyname)\r\n\t\t\t\t.txt(row[key]);\r\n\t\t}\r\n\t\t// post to edit url\r\n\t\tthis.query({\r\n\t\t\turl: this.postUrl,\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: doc.toString()\r\n\t\t}, function(err, data) {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\tvar row = that.parseEntry(data.entry);\r\n\t\t\tthat.rows.push(row);\r\n\t\t\tcallback(null, row);\r\n\t\t});\r\n\t},\r\n\tforEach: function(callback) {\r\n\t\tthis.rows.forEach(callback);\r\n\t},\r\n\tgetRow: function(index) {\r\n\t\treturn this.rows[index];\r\n\t},\r\n\tgetRows: function() {\r\n\t\treturn this.rows;\r\n\t},\r\n\tremove: function(row, callback) {\r\n\t\tvar that = this;\r\n\t\tthis.query({\r\n\t\t\turl: row.id,\r\n\t\t\tmethod: 'GET'\r\n\t\t}, function(err, rowData) {\r\n\t\t\tvar entry = that.parseEntry(rowData.entry);\r\n\t\t\tthat.query({\r\n\t\t\t\turl: entry.editUrl,\r\n\t\t\t\tmethod: 'DELETE'\r\n\t\t\t}, function(err) {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\treturn callback(err);\r\n\t\t\t\t}\r\n\t\t\t\tcallback();\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n\tsave: function(row, options, callback) {\r\n\t\tif (typeof options === 'function') {\r\n\t\t\tcallback = options;\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t// modify a row, then pass it to this function to save it, only modifications to data info is allowed\r\n\t\tif (!row.editUrl || !row.id) {\r\n\t\t\treturn this.create(row, callback);\r\n\t\t}\r\n\r\n\t\tvar doc = builder.create(),\r\n\t\t\tthat = this;\r\n\r\n\t\tvar document = doc.begin('entry')\r\n\t\t\t\t.att('xmlns','http://www.w3.org/2005/Atom')\r\n\t\t\t\t.att('xmlns:gsx','http://schemas.google.com/spreadsheets/2006/extended')\r\n\t\t\t.ele('id')\r\n\t\t\t\t.txt(row.id)\r\n\t\t\t\t.up();\r\n\t\tfor (var key in row.data) {\r\n\t\t\tif (row.data[key]) {\r\n\t\t\t\tdocument.ele('gsx:' + key)\r\n\t\t\t\t\t.txt(row.data[key]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// post to edit url\r\n\t\tthis.query(_.extend(options, {\r\n\t\t\turl: row.editUrl,\r\n\t\t\tmethod: 'PUT',\r\n\t\t\tbody: doc.toString()\r\n\t\t}), function(err, data) {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\tvar row = that.parseEntry(data.entry);\r\n\t\t\tif (!row) {\r\n\t\t\t\treturn callback(new Error('Unable to save result - no id ' + (data.entry || '').toString().slice(0, 300)));\r\n\t\t\t} else {\r\n\t\t\t\tcallback(null, row);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexports.Rows = Rows;","/home/travis/build/npmtest/node-npmtest-google-sheets/node_modules/google-sheets/lib/utils.js":"\r\nexports.makeUrl = function(feed, key, worksheetKey) {\r\n\tvar url = '';\r\n\tif (feed==='spreadsheets') {\r\n\t\turl = 'https://spreadsheets.google.com/feeds/spreadsheets/private/full/' + key;\r\n\t} else if (feed === 'worksheets') {\r\n\t\turl = 'https://spreadsheets.google.com/feeds/worksheets/' + key + '/private/full';\r\n\t} else if (feed === 'worksheet') {\r\n\t\turl = 'https://spreadsheets.google.com/feeds/worksheets/' + key + '/private/full/' + worksheetKey;\r\n\t} else if (feed === 'list') {\r\n\t\turl = 'https://spreadsheets.google.com/feeds/list/' + key + '/' + worksheetKey + '/private/full';\r\n\t} else if (feed === 'cells') {\r\n\t\turl = 'https://spreadsheets.google.com/feeds/cells/' + key + '/' + worksheetKey + '/private/full';\r\n\t}\r\n\treturn url;\r\n};","/home/travis/build/npmtest/node-npmtest-google-sheets/node_modules/google-sheets/lib/cells.js":"var request = require('request'),\r\n\tbuilder = require('xmlbuilder'),\r\n\txml2js = require('xml2js'),\r\n\tmakeUrl = require('./utils').makeUrl,\r\n\t_ = require('underscore');\r\n\r\nfunction Cells(data,authId) {\r\n\tthis.authId = authId;\r\n\tthis.cells = [];\r\n\tthis.colToHeaderMap = {};\r\n\tthis.headerToColMap = {};\r\n\tthis.rows = {};\r\n\tthis.parse(data);\r\n}\r\nCells.prototype = {\r\n\tquery: function(options, callback) {\r\n\t\trequest({\r\n\t\t\turl: options.url,\r\n\t\t\tmethod: options.method || 'GET',\r\n\t\t\tbody: options.body || null,\r\n\t\t\theaders: _.extend(options.headers || {} , {\r\n\t\t\t\t'Authorization': 'GoogleLogin auth=' + this.authId,\r\n\t\t\t\t'Content-Type': 'application/atom+xml',\r\n\t\t\t\t'If-Match': '*'\r\n\t\t\t})\r\n\t\t}, function(error, response, body) {\r\n\t\t\tif (error) {\r\n\t\t\t\treturn callback(error);\r\n\t\t\t}\r\n\t\t\tvar parser = new xml2js.Parser({\r\n\t\t\t\texplicitArray: false,\r\n\t\t\t\tasync: true,\r\n\t\t\t\tmergeAttrs: true\r\n\t\t\t});\r\n\t\t\tif (body) {\r\n\t\t\t\tparser.parseString(body, function(err, result) {\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\treturn callback(body);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcallback(err, result);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tcallback();\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\tparseEntry: function(entry) {\r\n\t\tvar cell = {\r\n\t\t\tid: entry.id,\r\n\t\t\tlastModified: entry.updated,\r\n\t\t\ttitle: entry.title._,\r\n\t\t\tcontent: entry.content._,\r\n\t\t\tdata: {}\r\n\t\t};\r\n\t\tfor (var k=0; k < entry.link.length; k++) {\r\n\t\t\tif (entry.link[k].rel == 'edit') {\r\n\t\t\t\tcell.editUrl = entry.link[k].href;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (var key in entry) {\r\n\t\t\tif (key.indexOf('gs:cell')===0) {\r\n\t\t\t\tif (!_.isEmpty(entry[key])) {\r\n\t\t\t\t\tcell.data = entry[key]._;\r\n\t\t\t\t\tcell.row = entry[key].row;\r\n\t\t\t\t\tcell.col = entry[key].col;\r\n\t\t\t\t\tcell.inputValue = entry[key].inputValue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn cell;\r\n\t},\r\n\tparse: function(data) {\r\n\t\tvar i = 0;\r\n\r\n\t\tthis.id = data.feed.id;\r\n\r\n\t\t// loop over links\r\n\t\tfor (i=0; i < data.feed.link.length; i++) {\r\n\t\t\tif (data.feed.link[i].rel == 'http://schemas.google.com/g/2005#post') {\r\n\t\t\t\tthis.postUrl = data.feed.link[i].href;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.startIndex = parseInt(data.feed['openSearch:startIndex'],10);\r\n\t\tthis.rowCount = parseInt(data.feed['gs:rowCount'], 10);\r\n\t\tthis.colCount = parseInt(data.feed['gs:colCount'], 10);\r\n\t\tif (data.feed['openSearch:itemsPerPage']) {\r\n\t\t\tthis.itemsPerPage = parseInt(data.feed['openSearch:itemsPerPage'],10);\r\n\t\t}\r\n\r\n\t\t// loop over items and create Row objects\r\n\t\tvar entries = data.feed.entry;\r\n\t\tvar cells = [], cell;\r\n\t\tif (Array.isArray(entries)) {\r\n\t\t\tfor (i=0; i < entries.length; i++) {\r\n\t\t\t\tvar entry = entries[i];\r\n\t\t\t\tcell = this.parseEntry(entry);\r\n\t\t\t\tcells.push(cell);\r\n\t\t\t}\r\n\t\t} else if (entries) {\r\n\t\t\tcell = this.parseEntry(entries);\r\n\t\t\tcells.push(cell);\r\n\t\t}\r\n\t\tthis.cells = cells;\r\n\r\n\t\tvar self = this;\r\n\t\tthis.cells.forEach(function(c) {\r\n\t\t\tif (c.row === '1') {\r\n\t\t\t\tvar normalizedHeader = c.data.toString().replace(/\\s+/g, '').toLowerCase();\r\n\t\t\t\tself.colToHeaderMap[c.col] = normalizedHeader;\r\n\t\t\t\tself.headerToColMap[normalizedHeader] = c.col;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.cells.forEach(function(c) {\r\n\t\t\tif (!self.rows[c.row]) {\r\n\t\t\t\tself.rows[c.row] = {};\r\n\t\t\t}\r\n\t\t\tself.rows[c.row][self.colToHeaderMap[c.col]] = c;\r\n\t\t});\r\n\t},\r\n\tupdate: function(cells, callback) {\r\n\t\tif (!Array.isArray(cells)) {\r\n\t\t\tcells = Object.keys(cells).map(function(k) {\r\n\t\t\t\treturn cells[k];\r\n\t\t\t});\r\n\t\t}\r\n\t\t// modify a row, then pass it to this function to save it, only modifications to data info is allowed\r\n\t\tvar doc = builder.create(),\r\n\t\t\tthat = this;\r\n\r\n\t\tvar document = doc.begin('feed')\r\n\t\t\t\t.att('xmlns','http://www.w3.org/2005/Atom')\r\n\t\t\t\t.att('xmlns:batch','http://schemas.google.com/gdata/batch')\r\n\t\t\t\t.att('xmlns:gs','http://schemas.google.com/spreadsheets/2006');\r\n\t\tdocument.ele('id').txt(this.id).up();\r\n\r\n\t\tcells.forEach(function(c) {\r\n\t\t\tvar batchId = 'R' + c.row + 'C' + c.col;\r\n\t\t\tvar entry = document.ele('entry');\r\n\t\t\tif (c.title) {\r\n\t\t\t\tentry.ele('batch:id').txt(c.title).up();\r\n\t\t\t} else {\r\n\t\t\t\tvar title = that.numbersToLetters(parseInt(c.col, 10)) + c.row;\r\n\t\t\t\tentry.ele('batch:id').txt(title).up();\r\n\t\t\t}\r\n\t\t\tentry.ele('batch:operation').att('type', 'update');\r\n\t\t\tif (c.id) {\r\n\t\t\t\tentry.ele('id').txt(c.id).up();\r\n\t\t\t} else {\r\n\t\t\t\tentry.ele('id').txt(that.id + '/' + batchId).up();\r\n\t\t\t}\r\n\t\t\tvar editLink = entry.ele('link')\r\n\t\t\t\t.att('rel', 'edit')\r\n\t\t\t\t.att('type', 'application/atom+xml');\r\n\t\t\tif (c.editUrl) {\r\n\t\t\t\teditLink.att('href', c.editUrl);\r\n\t\t\t} else {\r\n\t\t\t\teditLink.att('href', that.id + '/' + batchId + '/version');\r\n\t\t\t}\r\n\r\n\t\t\tentry.ele('gs:cell')\r\n\t\t\t\t.att('row', c.row.toString())\r\n\t\t\t\t.att('col', c.col.toString())\r\n\t\t\t\t.att('inputValue', c.data);\r\n\t\t});\r\n\t\t// post to edit url\r\n\t\tvar url = this.id + '/batch';\r\n\t\tthis.query({\r\n\t\t\turl: url,\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: doc.toString()\r\n\t\t}, function(err, data) {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\treturn callback(null);\r\n\t\t\t// todo - really should update state based on result.\r\n\t\t\t/*\r\n\t\t\tvar row = that.parseEntry(data.entry);\r\n\t\t\tthat.rows.push(row);\r\n\t\t\tcallback(null, row);\r\n\t\t\t*/\r\n\t\t});\r\n\t},\r\n\tforEach: function(callback) {\r\n\t\tthis.rows.forEach(callback);\r\n\t},\r\n\tgetCell: function(row, col) {\r\n\t\trow = row.toString();\r\n\t\tif (this.rows[row]) {\r\n\t\t\treturn this.rows[row][this.colToHeaderMap[col.toString()]];\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t},\r\n\tgetRow: function(row) {\r\n\t\tif (this.rows[row.toString()]) {\r\n\t\t\treturn this.rows[row.toString()];\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t},\r\n\tgetRows: function() {\r\n\t\treturn this.rows;\r\n\t},\r\n\tgetCells: function() {\r\n\t\treturn this.cells;\r\n\t},\r\n\tnumbersToLetters: function(num) {\r\n\t\tvar base = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', i, j = num, result = '';\r\n\t\twhile (j > 0) {\r\n\t\t\tvar index = j % base.length;\r\n\t\t\tresult = result + base[index - 1];\r\n\t\t\tj = j - index;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n};\r\n\r\nexports.Cells = Cells;","/home/travis/build/npmtest/node-npmtest-google-sheets/node_modules/google-sheets/lib/worksheet.js":"var request = require('request'),\r\n\tbuilder = require('xmlbuilder'),\r\n\txml2js = require('xml2js'),\r\n\tquerystring = require('querystring'),\r\n\tRows = require('./rows').Rows,\r\n\tCells = require('./cells').Cells,\r\n\tmakeUrl = require('./utils').makeUrl,\r\n\t_ = require('underscore');\r\n\r\nfunction Worksheet(meta, authId) {\r\n\tthis.meta = meta;\r\n\tthis.authId = authId;\r\n}\r\nWorksheet.prototype = {\r\n\tcreateXML: function() {\r\n\t\tvar doc = builder.create(),\r\n\t\t\toptions = {\r\n\t\t\t\ttitle: this.meta.title || 'Untitled Worksheet',\r\n\t\t\t\trows: this.meta.rows || 50,\r\n\t\t\t\tcols: this.meta.cols || 10\r\n\t\t\t};\r\n\r\n\t\tdoc.begin('entry')\r\n\t\t\t\t.att('xmlns','http://www.w3.org/2005/Atom')\r\n\t\t\t\t.att('xmlns:gs','http://schemas.google.com/spreadsheets/2006')\r\n\t\t\t.ele('title')\r\n\t\t\t\t.txt(options.title)\r\n\t\t\t\t.up()\r\n\t\t\t.ele('gs:rowCount')\r\n\t\t\t\t.txt(\"\"+options.rows)\r\n\t\t\t\t.up()\r\n\t\t\t.ele('gs:colCount')\r\n\t\t\t\t.txt(\"\"+options.cols);\r\n\t\treturn doc.toString();\r\n\t},\r\n\tsaveXML: function() {\r\n\t\tvar doc = builder.create();\r\n\r\n\t\tdoc.begin('entry')\r\n\t\t\t\t.att('xmlns','http://www.w3.org/2005/Atom')\r\n\t\t\t\t.att('xmlns:gs','http://schemas.google.com/spreadsheets/2006')\r\n\t\t\t.ele('id')\r\n\t\t\t\t.txt(this.meta.url)\r\n\t\t\t\t.up()\r\n\t\t\t.ele('title')\r\n\t\t\t\t.att('type', 'text')\r\n\t\t\t\t.txt(this.meta.title)\r\n\t\t\t\t.up()\r\n\t\t\t.ele('gs:rowCount')\r\n\t\t\t\t.txt(\"\"+this.meta.rows)\r\n\t\t\t\t.up()\r\n\t\t\t.ele('gs:colCount')\r\n\t\t\t\t.txt(\"\"+this.meta.cols);\r\n\t\treturn doc.toString();\r\n\t},\r\n\tcreate: function(callback) {\r\n\t\tvar that = this;\r\n\r\n\t\tthis.query({\r\n\t\t\turl: makeUrl('worksheets',this.meta.spreadsheetId),\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: this.createXML()\r\n\t\t}, function(err, data) {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\tthat.parseJSON(data.entry);\r\n\t\t\tcallback(null, that);\r\n\t\t});\r\n\r\n\t},\r\n\tsave: function(callback) {\r\n\t\tif (!this.meta.editUrl) {\r\n\t\t\t// create instead\r\n\t\t\treturn this.create(callback);\r\n\t\t}\r\n\t\t// otherwise save to edit url\r\n\r\n\t\tvar that = this,\r\n\t\t\txml = this.saveXML();\r\n\r\n\t\tthis.query({\r\n\t\t\turl: this.meta.url,\r\n\t\t\tmethod: 'GET'\r\n\t\t}, function(err, entryData) {\r\n\t\t\tvar entry = that.parseJSON(entryData.entry);\r\n\t\t\tthat.query({\r\n\t\t\t\turl: entry.editUrl,\r\n\t\t\t\tmethod: 'PUT',\r\n\t\t\t\tbody: xml\r\n\t\t\t}, function(err, data) {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\treturn callback(err);\r\n\t\t\t\t}\r\n\t\t\t\tthat.parseJSON(data.entry);\r\n\t\t\t\tcallback(null, that);\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n\tremove: function(callback) {\r\n\t\tthis.query({\r\n\t\t\turl: this.meta.editUrl,\r\n\t\t\tmethod: 'DELETE'\r\n\t\t}, function(err) {\r\n\t\t\tcallback(err);\r\n\t\t});\r\n\t},\r\n\tset: function(options) {\r\n\t\tthis.meta = _.extend(this.meta, options);\r\n\t},\r\n\tsetTitle: function(title) {\r\n\t\tthis.meta.title = title;\r\n\t},\r\n\tgetTitle: function() {\r\n\t\treturn this.meta.title;\r\n\t},\r\n\tquery: function(options, callback) {\r\n\t\trequest({\r\n\t\t\turl: options.url,\r\n\t\t\tmethod: options.method || 'GET',\r\n\t\t\tbody: options.body || null,\r\n\t\t\theaders: {\r\n\t\t\t\t'Authorization': 'GoogleLogin auth=' + this.authId,\r\n\t\t\t\t'Content-Type': 'application/atom+xml'\r\n\t\t\t}\r\n\t\t}, function(error, response, body) {\r\n\t\t\tif (error) {\r\n\t\t\t\treturn callback(error);\r\n\t\t\t}\r\n\t\t\tif (body!==undefined) {\r\n\t\t\t\tvar parser = new xml2js.Parser({\r\n\t\t\t\t\texplicitArray: false,\r\n\t\t\t\t\tasync: true,\r\n\t\t\t\t\tmergeAttrs: true\r\n\t\t\t\t});\r\n\t\t\t\tparser.parseString(body, function(err, result) {\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t// if an error occurred in the parsing, we can assume we got a non-xml result from google\r\n\t\t\t\t\t\t// pass that error back instead\r\n\t\t\t\t\t\treturn callback(body);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcallback(err, result);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tcallback();\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\tparseJSON: function(entry) {\r\n\t\tvar worksheet = {\r\n\t\t\tlastModified: entry.updated,\r\n\t\t\ttitle: entry.title._,\r\n\t\t\turl: entry.id,\r\n\t\t\trows: parseInt(entry['gs:rowCount'],10),\r\n\t\t\tcols: parseInt(entry['gs:colCount'],10)\r\n\t\t};\r\n\t\t// parse id from url\r\n\t\tworksheet.id = worksheet.url.substr(worksheet.url.lastIndexOf('/')+1);\r\n\t\t// loop over links\r\n\t\tfor (var i=0; i < entry.link.length; i++) {\r\n\t\t\tif (entry.link[i].rel==='edit') {\r\n\t\t\t\tworksheet.editUrl = entry.link[i].href;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.meta = _.extend(this.meta, worksheet);\r\n\t\treturn this.meta;\r\n\t},\r\n\r\n\tgetRows: function(options,callback) {\r\n\t\tif (typeof options === 'function') {\r\n\t\t\tcallback = options;\r\n\t\t\toptions = {};\r\n\t\t}\r\n\r\n\t\tif (options.orderby) {\r\n\t\t\toptions.orderby = 'gsx:' + options.orderby;\r\n\t\t}\r\n\t\tvar sq = null;\r\n\t\tif (options.sq) {\r\n\t\t\tsq = options.sq;\r\n\t\t\tdelete options.sq;\r\n\t\t}\r\n\r\n\t\tvar that = this,\r\n\t\t\turl =  makeUrl('list', this.meta.spreadsheetId, this.meta.id) + '?' + querystring.stringify(options);\r\n\r\n\t\tif (sq) {\r\n\t\t\tsq = encodeURIComponent(sq);\r\n\t\t\tsq = sq.replace('%3E', '>').replace('%3C','<');\r\n\t\t\turl += '&sq=' + sq;\r\n\t\t}\r\n\r\n\t\tthis.query({\r\n\t\t\turl:url,\r\n\t\t\tmethod: 'GET'\r\n\t\t}, function(err, data) {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\r\n\t\t\t// parse rows into row objects we can update and save in the worksheet\r\n\t\t\tvar rows = new Rows(data, that.authId);\r\n\t\t\tthat.rows = rows;\r\n\t\t\tcallback(null, rows);\r\n\t\t});\r\n\t},\r\n\r\n\tgetCells: function(options,callback) {\r\n\t\tif (typeof options === 'function') {\r\n\t\t\tcallback = options;\r\n\t\t\toptions = {};\r\n\t\t}\r\n\r\n\t\tif (options.minRow) {\r\n\t\t\toptions['min-row'] = options.minRow;\r\n\t\t\tdelete options.minRow;\r\n\t\t}\r\n\t\tif (options.maxRow) {\r\n\t\t\toptions['max-row'] = options.maxRow;\r\n\t\t\tdelete options.maxRow;\r\n\t\t}\r\n\r\n\t\tif (options.minCol) {\r\n\t\t\toptions['min-col'] = options.minCol;\r\n\t\t\tdelete options.minCol;\r\n\t\t}\r\n\t\tif (options.maxCol) {\r\n\t\t\toptions['max-col'] = options.maxCol;\r\n\t\t\tdelete options.maxCol;\r\n\t\t}\r\n\r\n\t\tvar that = this,\r\n\t\t\turl =  makeUrl('cells', this.meta.spreadsheetId, this.meta.id) + '?' + querystring.stringify(options);\r\n\r\n\t\tthis.query({\r\n\t\t\turl:url,\r\n\t\t\tmethod: 'GET'\r\n\t\t}, function(err, data) {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\r\n\t\t\t// parse rows into row objects we can update and save in the worksheet\r\n\t\t\tvar cells = new Cells(data, that.authId);\r\n\t\t\tthat.cells = cells;\r\n\t\t\tcallback(null, cells);\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexports.Worksheet = Worksheet;","/home/travis/build/npmtest/node-npmtest-google-sheets/node_modules/google-sheets/lib/spreadsheet.js":"var request = require('request'),\r\n\tbuilder = require('xmlbuilder'),\r\n\txml2js = require('xml2js'),\r\n\tWorksheet = require('./worksheet').Worksheet,\r\n\tmakeUrl = require('./utils').makeUrl,\r\n\t_ = require('underscore');\r\n\r\nfunction Spreadsheet(meta, authId) {\r\n\tthis.meta = meta;\r\n\tthis.authId = authId;\r\n\tthis.worksheets = [];\r\n}\r\nSpreadsheet.prototype = {\r\n\r\n\tquery: function(options, callback) {\r\n\t\trequest({\r\n\t\t\turl: options.url,\r\n\t\t\tmethod: options.method || 'GET',\r\n\t\t\tbody: options.body || null,\r\n\t\t\theaders: {\r\n\t\t\t\t'Authorization': 'GoogleLogin auth=' + this.authId,\r\n\t\t\t\t'Content-Type': 'application/atom+xml'\r\n\t\t\t}\r\n\t\t}, function(error, response, body) {\r\n\t\t\tif (error) {\r\n\t\t\t\treturn callback(error);\r\n\t\t\t}\r\n\t\t\tvar parser = new xml2js.Parser({\r\n\t\t\t\texplicitArray: false,\r\n\t\t\t\tasync: true,\r\n\t\t\t\tmergeAttrs: true\r\n\t\t\t});\r\n\t\t\tparser.parseString(body, function(err, result) {\r\n\t\t\t\tcallback(err, result);\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n\r\n\tgetWorksheetAt: function(index, callback) {\r\n\t\tthis.getWorksheets(function(err, worksheets) {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\tif (index >= worksheets.length) {\r\n\t\t\t\treturn callback('index out of range, only ' + worksheets.length + ' worksheets in this spreadsheet');\r\n\t\t\t}\r\n\t\t\tcallback(null, worksheets[index]);\r\n\t\t});\r\n\t},\r\n\tgetWorksheet: function(name, callback) {\r\n\t\tthis.getWorksheets(function(err, worksheets) {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\tfor (var i=0; i < worksheets.length; i++) {\r\n\t\t\t\tif (worksheets[i].getTitle()===name) {\r\n\t\t\t\t\treturn callback(null, worksheets[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn callback('no worksheet with title ' + name);\r\n\t\t});\r\n\t},\r\n\r\n\tgetWorksheets: function(callback) {\r\n\t\tvar that = this;\r\n\t\tthis.query({\r\n\t\t\turl: makeUrl('worksheets',this.meta.id)\r\n\t\t}, function(err, result) {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\tvar worksheets = [];\r\n\t\t\t\r\n\t\t\tif ( Array.isArray(result.feed.entry) === false ) {\r\n\t\t\t\tresult.feed.entry = [result.feed.entry];\r\n\t\t\t}\r\n\r\n      function addEntry (entry) {\n\t\t\t  var worksheet = new Worksheet({spreadsheetId: that.meta.id},that.authId);\n    \t\tworksheet.parseJSON(entry);\n    \t\tworksheets.push(worksheet);\n      }\n      if (typeof result.feed.entry.length === 'number') {\n  \t\t\tfor(var i=0; i < result.feed.entry.length; i++) {\n  \t\t\t\taddEntry(result.feed.entry[i]);\n  \t\t\t}\n      } else {\n        addEntry(result.feed.entry);\n      }\n\r\n\t\t\tthat.worksheets = worksheets;\r\n\t\t\tcallback(null, worksheets);\r\n\t\t});\r\n\t},\r\n\tdeleteWorksheet: function(worksheet, callback) {\r\n\t\tif (!(worksheet instanceof Worksheet)) {\r\n\t\t\tcallback('Not a worksheet instance');\r\n\t\t} else {\r\n\t\t\tworksheet.remove(callback);\r\n\t\t}\r\n\t},\r\n\taddWorksheet: function(data, callback) {\r\n\t\tvar worsheet = null;\r\n\r\n\t\tif (data instanceof Worksheet) {\r\n\t\t\t// just add it to our array, and tell worksheet to save\r\n\t\t\tdata.meta.spreadsheetId = this.meta.id;\r\n\t\t\tworksheet = data;\r\n\t\t} else if (typeof data === 'object') {\r\n\t\t\tdata.spreadsheetId = this.meta.id;\r\n\t\t\tworksheet = new Worksheet(data, this.authId);\r\n\t\t}\r\n\r\n\t\tthis.worksheets.push(worksheet);\r\n\t\tworksheet.save(callback);\r\n\t}\r\n};\r\n\r\nexports.Spreadsheet = Spreadsheet;\n","/home/travis/build/npmtest/node-npmtest-google-sheets/node_modules/google-sheets/lib/auth.js":"var GoogleClientLogin = require('googleclientlogin').GoogleClientLogin;\r\n\r\nexports.authorize = function(options, callback) {\r\n\tvar googleAuth = new GoogleClientLogin({\r\n\t\temail: options.email,\r\n\t\tpassword: options.password,\r\n\t\tservice: 'spreadsheets',\r\n\t\taccountType: GoogleClientLogin.accountTypes.google\r\n\t});\r\n\tgoogleAuth.on(GoogleClientLogin.events.login, function(){\r\n\t\t// do things with google services\r\n\t\tcallback(null, googleAuth.getAuthId());\r\n\t});\r\n\tgoogleAuth.on(GoogleClientLogin.events.error, function(e) {\r\n\t\tswitch(e.message) {\r\n\t\t\tcase GoogleClientLogin.errors.loginFailed:\r\n\t\t\t\tif (this.isCaptchaRequired()) {\r\n\t\t\t\t\treturn callback('captcha required', {\r\n\t\t\t\t\t\terror: 'Process captcha then recall function with captcha and token parameters',\r\n\t\t\t\t\t\tcaptchaUrl: this.getCaptchaUrl(),\r\n\t\t\t\t\t\tcaptchaToken: this.getCaptchaToken()\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase GoogleClientLogin.errors.tokenMissing:\r\n\t\t\tcase GoogleClientLogin.errors.captchaMissing:\r\n\t\t\t\treturn callback('captcha missing', {error: 'You must pass the both captcha token and the captcha'});\r\n\t\t}\r\n\t\tcallback('unkown error',{error: 'Unknown error in GoogleClientLogin.'});\r\n\t});\r\n\tvar captcha = undefined;\r\n\tif (options.captcha) {\r\n\t\tcaptcha = {logincaptcha: options.captcha, logintoken: options.token};\r\n\t}\r\n\tgoogleAuth.login(captcha);\r\n};"}